name: Deploy Backend to Dev

# Trigger this workflow on a push to the main branch if files in the backend/ directory have changed.
on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend-dev.yml'
  workflow_dispatch:
# Permissions required for OIDC to securely connect to AWS.
permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    
    # All Terraform commands will run from this directory
    defaults:
      run:
        working-directory: ./backend/environments/dev

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials using OIDC
      # This step assumes an IAM OIDC provider and role have been created in AWS.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::456202167790:role/githubaction
          aws-region: us-east-1 # Must match the region in your provider.tf

      # Step 3: Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
      # Step 4: Initialize Terraform
      # Configures the backend, downloads provider plugins.
      - name: Terraform Init
        id: init
        run: terraform init

      # Step 5: Validate the Terraform configuration
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Step 6: Generate a Terraform execution plan
      # This shows what changes will be made.
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan

      # Step 7: Apply the Terraform plan
      # This step only runs on the main branch.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan